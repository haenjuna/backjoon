import java.util.*;
import java.util.Queue;
import java.util.LinkedList;

public class Main {

	public static Queue<Node> queue;

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int T = sc.nextInt();
		int[] worm = new int[T];
		for (int j = 0; j < T; j++) {
			int M = sc.nextInt();
			int N = sc.nextInt();
			int K = sc.nextInt();
			int[] dx = { -1, 1, 0, 0 };
			int[] dy = { 0, 0, -1, 1 };
			queue = new LinkedList();
			int[][] cabbage = new int[M][N];
			int[][] visit = new int[M][N];
			for (int i = 0; i < K; i++) {
				int X = sc.nextInt();
				int Y = sc.nextInt();
				cabbage[X][Y] = 1;
			}
			int cnt = 0;
			for (int i = 0; i < M; i++) {
				for (int h = 0; h < N; h++) {
					if (cabbage[i][h] == 1 && visit[i][h] == 0) {
						cnt++;
						queue.add(new Node(i, h));
						visit[i][h] = 1;
						while (!queue.isEmpty()) {
							Node node = queue.remove(); // 노드의 값을 빼옴
							int x = node.X;
							int y = node.Y;
							int check = 0;
							for (int k = 0; k < dx.length; k++) {
								int x1 = x + dx[k];
								int y1 = y + dy[k];
								if (x1 >= 0 && y1 >= 0 && x1 < M && y1 < N) {
									if (visit[x1][y1] == 0 && cabbage[x1][y1] == 1) {
										queue.add(new Node(x1, y1));
										visit[x1][y1] = 1;
									}
								}
							}
						}
					}
				}
			}
			worm[j] = cnt;
			}
			for (int i = 0; i < worm.length; i++) {
				System.out.println(worm[i]);
			}
	}
}

class Node { // 입력받은 X,Y의 값으로 노드를 생성
	int X;
	int Y;

	public Node(int X, int Y) {
		this.X = X;
		this.Y = Y;
	}

}
